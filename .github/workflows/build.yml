name: Build

on:
  schedule:
    - cron: '34 21 * * *'
  push:
    branches: [ "master", "develop", "feature/*" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
#  pull_request:
#    branches: [ "master", "develop", "feature/*" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERFILE: "Dockerfile"

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Print env
        run: |
          echo "${{ env.REGISTRY }}"
          echo "${{ env.IMAGE_NAME }}"
          echo "${{ env.DOCKERFILE }}"

      - name: Checkout repository
        uses: actions/checkout@v3

#        BUILD JAR
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'oracle'

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean package
#         BUILD DOCKER CONTAINER
      - name: Prepare branch name
        uses: jungwinter/split@master
        id: branch
        with:
          msg: ${{ github.head_ref || github.ref_name }}
          separator: "/"
          maxsplit: -1

      - name: Image name to lowercase
        id: prepare-image-name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.IMAGE_NAME }}

      - name: Prepare image name
        run: echo "IMAGE_NAME=${{ steps.prepare-image-name.outputs.lowercase }}" >> $GITHUB_ENV

      - name: Prepare tags
        id: meta
        run: |
          echo "::set-output name=version::${{ steps.branch.outputs._1 || steps.branch.outputs._0 }}"
          echo "::set-output name=tags::${{ env.IMAGE_NAME }}:${{ steps.branch.outputs._1 || steps.branch.outputs._0 }}"

#      - name: Setup Docker
#        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      - name: Log into registry ${{ env.REGISTRY }}
        run: docker login ${{ env.REGISTRY }} --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        run: |
          docker build --tag ${{ env.REGISTRY }}/${{ steps.meta.outputs.tags }} . -f ${{ env.DOCKERFILE }}
          docker push ${{ env.REGISTRY }}/${{ steps.meta.outputs.tags }}
          clear_sha=$(docker images --digests | grep ${{ steps.meta.outputs.version }} | awk '{print $3}')
          echo "::set-output name=sha::$clear_sha"
